name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: uv sync --dev
      
      - name: Run ruff check
        run: uv run ruff check .
      
      - name: Run ruff format check
        run: uv run ruff format --check .

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: uv sync --dev
      
      - name: Run tests (without benchmarks)
        run: uv run pytest -v -m "not benchmark" --tb=short --junitxml=test-results.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results.xml

  build:
    runs-on: ${{ matrix.runner }}
    if: github.event_name == 'release'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            python-version: "3.12"
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            python-version: "3.13"
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            python-version: "3.12"
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            python-version: "3.13"
          - runner: macos-latest
            target: x86_64-apple-darwin
            python-version: "3.12"
          - runner: macos-latest
            target: x86_64-apple-darwin
            python-version: "3.13"
          - runner: macos-latest
            target: aarch64-apple-darwin
            python-version: "3.12"
          - runner: macos-latest
            target: aarch64-apple-darwin
            python-version: "3.13"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Build wheel
        run: |
          uv build --wheel --out-dir dist/
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}
          CARGO_PROFILE: release
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist/

  check-builds:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build]
    steps:
      - name: Check if at least one build succeeded
        run: |
          echo "At least one build job succeeded, proceeding with release"
          echo "This job succeeds if any of the build matrix jobs succeeded"

  build-sdist:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install 3.12
      
      - name: Build source distribution
        run: uv build --sdist --out-dir dist/
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [lint, test, check-builds, build-sdist]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
      
      - name: List artifacts
        run: ls -la dist/
      
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional jobs for development
  format-fix:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install 3.12
      
      - name: Install dependencies
        run: uv sync --dev
      
      - name: Run ruff format
        run: uv run ruff format .
      
      - name: Run ruff check --fix
        run: uv run ruff check --fix .
      
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "Auto-fix formatting and linting issues"
          git push
        continue-on-error: true

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit
        continue-on-error: true
